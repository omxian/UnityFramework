// Generated by github.com/davyxu/tabtoy
// Version: 2.9.0
// DO NOT EDIT!!
using System.Collections.Generic;

namespace table
{
	
	// Defined in table: Tests
	public enum ActorType
	{
		
		
		Leader = 0, // 唐僧
		
		
		Monkey = 1, // 孙悟空
		
		
		Pig = 2, // 猪八戒
		
		
		Hammer = 3, // 沙僧
	
	}
	
	

	// Defined in table: Table
	
	public partial class Table
	{
	
		public tabtoy.Logger TableLogger = new tabtoy.Logger();
	
		
		/// <summary> 
		/// Test
		/// </summary>
		public List<TestDefine> Test = new List<TestDefine>(); 
		
		/// <summary> 
		/// Tests
		/// </summary>
		public List<TestsDefine> Tests = new List<TestsDefine>(); 
	
	
		#region Index code
	 	Dictionary<int, TestDefine> _TestByID = new Dictionary<int, TestDefine>();
        public TestDefine GetTestByID(int ID, TestDefine def = default(TestDefine))
        {
            TestDefine ret;
            if ( _TestByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(TestDefine) )
			{
				TableLogger.ErrorLine("GetTestByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<string, TestDefine> _TestByName = new Dictionary<string, TestDefine>();
        public TestDefine GetTestByName(string Name, TestDefine def = default(TestDefine))
        {
            TestDefine ret;
            if ( _TestByName.TryGetValue( Name, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(TestDefine) )
			{
				TableLogger.ErrorLine("GetTestByName failed, Name: {0}", Name);
			}

            return def;
        }
		Dictionary<long, TestsDefine> _TestsByID = new Dictionary<long, TestsDefine>();
        public TestsDefine GetTestsByID(long ID, TestsDefine def = default(TestsDefine))
        {
            TestsDefine ret;
            if ( _TestsByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(TestsDefine) )
			{
				TableLogger.ErrorLine("GetTestsByID failed, ID: {0}", ID);
			}

            return def;
        }
		Dictionary<string, TestsDefine> _TestsByName = new Dictionary<string, TestsDefine>();
        public TestsDefine GetTestsByName(string Name, TestsDefine def = default(TestsDefine))
        {
            TestsDefine ret;
            if ( _TestsByName.TryGetValue( Name, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(TestsDefine) )
			{
				TableLogger.ErrorLine("GetTestsByName failed, Name: {0}", Name);
			}

            return def;
        }
		
		public string GetBuildID(){
			return "d41d8cd98f00b204e9800998ecf8427e";
		}
	
		#endregion
		#region Deserialize code
		
		static tabtoy.DeserializeHandler<Table> _TableDeserializeHandler;
		static tabtoy.DeserializeHandler<Table> TableDeserializeHandler
		{
			get
			{
				if (_TableDeserializeHandler == null )
				{
					_TableDeserializeHandler = new tabtoy.DeserializeHandler<Table>(Deserialize);
				}

				return _TableDeserializeHandler;
			}
		}
		public static void Deserialize( Table ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0xa0000:
                	{
						ins.Test.Add( reader.ReadStruct<TestDefine>(TestDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0001:
                	{
						ins.Tests.Add( reader.ReadStruct<TestsDefine>(TestsDefineDeserializeHandler) );
                	}
                	break; 
                }
             } 

			
			// Build Test Index
			for( int i = 0;i< ins.Test.Count;i++)
			{
				var element = ins.Test[i];
				
				ins._TestByID.Add(element.ID, element);
				
				ins._TestByName.Add(element.Name, element);
				
			}
			
			// Build Tests Index
			for( int i = 0;i< ins.Tests.Count;i++)
			{
				var element = ins.Tests[i];
				
				ins._TestsByID.Add(element.ID, element);
				
				ins._TestsByName.Add(element.Name, element);
				
			}
			
		}
		static tabtoy.DeserializeHandler<TestDefine> _TestDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<TestDefine> TestDefineDeserializeHandler
		{
			get
			{
				if (_TestDefineDeserializeHandler == null )
				{
					_TestDefineDeserializeHandler = new tabtoy.DeserializeHandler<TestDefine>(Deserialize);
				}

				return _TestDefineDeserializeHandler;
			}
		}
		public static void Deserialize( TestDefine ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.IconID = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<Prop> _PropDeserializeHandler;
		static tabtoy.DeserializeHandler<Prop> PropDeserializeHandler
		{
			get
			{
				if (_PropDeserializeHandler == null )
				{
					_PropDeserializeHandler = new tabtoy.DeserializeHandler<Prop>(Deserialize);
				}

				return _PropDeserializeHandler;
			}
		}
		public static void Deserialize( Prop ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.HP = reader.ReadInt32();
                	}
                	break; 
                	case 0x50001:
                	{
						ins.AttackRate = reader.ReadFloat();
                	}
                	break; 
                	case 0x80002:
                	{
						ins.ExType = reader.ReadEnum<ActorType>();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<AttackParam> _AttackParamDeserializeHandler;
		static tabtoy.DeserializeHandler<AttackParam> AttackParamDeserializeHandler
		{
			get
			{
				if (_AttackParamDeserializeHandler == null )
				{
					_AttackParamDeserializeHandler = new tabtoy.DeserializeHandler<AttackParam>(Deserialize);
				}

				return _AttackParamDeserializeHandler;
			}
		}
		public static void Deserialize( AttackParam ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.Value = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<Vec2> _Vec2DeserializeHandler;
		static tabtoy.DeserializeHandler<Vec2> Vec2DeserializeHandler
		{
			get
			{
				if (_Vec2DeserializeHandler == null )
				{
					_Vec2DeserializeHandler = new tabtoy.DeserializeHandler<Vec2>(Deserialize);
				}

				return _Vec2DeserializeHandler;
			}
		}
		public static void Deserialize( Vec2 ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.X = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.Y = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<TestsDefine> _TestsDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<TestsDefine> TestsDefineDeserializeHandler
		{
			get
			{
				if (_TestsDefineDeserializeHandler == null )
				{
					_TestsDefineDeserializeHandler = new tabtoy.DeserializeHandler<TestsDefine>(Deserialize);
				}

				return _TestsDefineDeserializeHandler;
			}
		}
		public static void Deserialize( TestsDefine ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x20000:
                	{
						ins.ID = reader.ReadInt64();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.Name = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.IconID = reader.ReadInt32();
                	}
                	break; 
                	case 0x50003:
                	{
						ins.NumericalRate = reader.ReadFloat();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.ItemID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.BuffID.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x90006:
                	{
						ins.Pos = reader.ReadStruct<Vec2>(Vec2DeserializeHandler);
                	}
                	break; 
                	case 0x80007:
                	{
						ins.Type = reader.ReadEnum<ActorType>();
                	}
                	break; 
                	case 0x10008:
                	{
						ins.SkillID.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x90009:
                	{
						ins.AttackParam = reader.ReadStruct<AttackParam>(AttackParamDeserializeHandler);
                	}
                	break; 
                	case 0x9000a:
                	{
						ins.SingleStruct = reader.ReadStruct<Prop>(PropDeserializeHandler);
                	}
                	break; 
                	case 0x9000b:
                	{
						ins.StrStruct.Add( reader.ReadStruct<Prop>(PropDeserializeHandler) );
                	}
                	break; 
                }
             } 

			
		}
		#endregion
	

	} 

	// Defined in table: Test
	
	public partial class TestDefine
	{
	
		
		/// <summary> 
		/// 唯一ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 名称
		/// </summary>
		public string Name = ""; 
		
		/// <summary> 
		/// 图标ID
		/// </summary>
		public int IconID = 0; 
	
	

	} 

	// Defined in table: Tests
	[System.Serializable]
	public partial class Prop
	{
	
		
		
		public int HP = 10; // 血量
		
		
		public float AttackRate = 0f; // 攻击速率
		
		
		public ActorType ExType = ActorType.Leader; // 额外类型
	
	

	} 

	// Defined in table: Tests
	[System.Serializable]
	public partial class AttackParam
	{
	
		
		
		public int Value = 0; // 攻击值
	
	

	} 

	// Defined in table: Tests
	[System.Serializable]
	public partial class Vec2
	{
	
		
		
		public int X = 0; 
		
		
		public int Y = 0; 
	
	

	} 

	// Defined in table: Tests
	[System.Serializable]
	public partial class TestsDefine
	{
	
		
		/// <summary> 
		/// 唯一ID
		/// </summary>
		public long ID = 0; 
		
		/// <summary> 
		/// 名称
		/// </summary>
		public string Name = ""; 
		
		/// <summary> 
		/// 图标ID
		/// </summary>
		public int IconID = 0; 
		
		/// <summary> 
		/// 攻击率
		/// </summary>
		public float NumericalRate = 0f; 
		
		/// <summary> 
		/// 物品id
		/// </summary>
		public int ItemID = 100; 
		
		/// <summary> 
		/// BuffID
		/// </summary>
		public List<int> BuffID = new List<int>(); 
		
		/// <summary> 
		/// 位置
		/// </summary>
		public Vec2 Pos = new Vec2(); 
		
		/// <summary> 
		/// 类型
		/// </summary>
		public ActorType Type = ActorType.Leader; 
		
		/// <summary> 
		/// 技能ID列表
		/// </summary>
		public List<int> SkillID = new List<int>(); 
		
		/// <summary> 
		/// 攻击参数
		/// </summary>
		public AttackParam AttackParam = new AttackParam(); 
		
		/// <summary> 
		/// 单结构解析
		/// </summary>
		public Prop SingleStruct = new Prop(); 
		
		/// <summary> 
		/// 字符串结构
		/// </summary>
		public List<Prop> StrStruct = new List<Prop>(); 
	
	

	} 

}
